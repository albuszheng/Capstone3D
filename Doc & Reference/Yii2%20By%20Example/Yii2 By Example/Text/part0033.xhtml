<?xml version="1.0" encoding="utf-8" ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.200rem;"><head><title>The URL pattern to support the multilanguage view</title><link rel="stylesheet" href="../Styles/style0001.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.75.2"/></head><body id="page"><div class="section" title="The URL pattern to support the multilanguage view" id="aid-VF2I1"><div class="titlepage"><div><div><h1 class="title"><a id="ch03lvl1sec27"></a>The URL pattern to support the multilanguage view</h1></div></div></div><p>There are different ways to <a id="id141" class="indexterm"></a>display the same view in different languages. A basic approach to support multilanguage views could be to insert a language code at the start of the route. For example, the previous route <code class="literal">news/index</code> will become <code class="literal">en/news/index</code> in English language, <code class="literal">it/news/index</code> in Italian language, <code class="literal">fr/news/index</code> in French language, and so on.</p><p>Append this rule in the <code class="literal">rules</code> property of <code class="literal">UrlManager</code>:</p><div class="informalexample"><pre class="programlisting">[
    'pattern' =&gt; '&lt;lang:\w+&gt;/&lt;controller&gt;/&lt;action&gt;',
    'route' =&gt; '&lt;controller&gt;/&lt;action&gt;',
],</pre></div><p>All the requests that have a language ID as the prefix in the path info, will be matched and passed to the <code class="literal">&lt;controller&gt;/&lt;action&gt;</code> route with the $<code class="literal">lang</code> parameters passed in GET.</p><p>Now, create a<a id="id142" class="indexterm"></a> new action named <code class="literal">actionInternationalIndex</code> in <code class="literal">NewsController</code> to test the multilanguage support:</p><div class="informalexample"><pre class="programlisting">public function actionInternationalIndex()
{
    // if missing, value will be 'en'
    $lang = Yii::$app-&gt;request-&gt;get('lang', 'en');
    
    Yii::$app-&gt;language = $lang;

    return $this-&gt;render('internationalIndex');
}</pre></div><p>In this action, <code class="literal">$lang</code> is taken from GET parameters. If the request does not contain the <code class="literal">$lang</code> parameter, the <code class="literal">en</code> value will be used as default.</p><p>Create new view in <code class="literal">views/news/internationalIndex.php</code> to check the language code passed to the URL.</p><div class="informalexample"><pre class="programlisting">Requested language for this page is:
&lt;br /&gt;
&lt;b&gt;&lt;?php echo Yii::$app-&gt;language ?&gt;&lt;/b&gt;</pre></div><p>Verify whether this action is working correctly by visiting <code class="literal">http://hostname/news/international-index</code>:</p><div class="mediaobject"><img src="../Images/image00255.jpeg" alt="The URL pattern to support the multilanguage view"/><div class="caption"><p>Setting the English language</p></div></div><p style="clear:both; height: 1em;"> </p><p>We are visualizing this page in English because no language code was passed to the URL. Consequently, the default language code, <code class="literal">en</code>, has been used. However, if we write the language code in the URL, the result will change.</p><p>For example, pointing to <code class="literal">http://hostname/basic/web/it/news/international-index</code> will display the following:</p><div class="mediaobject"><img src="../Images/image00256.jpeg" alt="The URL pattern to support the multilanguage view"/><div class="caption"><p>Setting the Italian language</p></div></div><p style="clear:both; height: 1em;"> </p><p>This response<a id="id143" class="indexterm"></a> gives us the confirmation that we have used <code class="literal">it</code> as the language code.</p><div class="note" title="Note"><h3 class="title"><a id="note17"></a>Note</h3><p>In this simple approach to support multi language, we get the <code class="literal">$lang</code> value from the request, as we have done in <code class="literal">actionInternationalIndex</code>; however, this is redundant and has to be generalized in all the requests. We could create a <code class="literal">BaseController</code> class as the base class for every Controller and then override the <code class="literal">beforeAction()</code> method, where we can set the <code class="literal">Yii::$app-&gt;language</code> parameter.</p></div></div></body></html>