<?xml version="1.0" encoding="utf-8" ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.200rem;"><head><title>Naming convention</title><link rel="stylesheet" href="../Styles/style0001.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.75.2"/></head><body id="page"><div class="section" title="Naming convention"><div class="titlepage" id="aid-H5A42"><div><div><h1 class="title"><a id="ch01lvl1sec12"></a>Naming convention</h1></div></div></div><p>In order to allow <a id="id69" class="indexterm"></a>auto-loading, Yii2 uses a simple standard to set names.</p><p>Routes that refer respectively to module, controller, and the action requested take the following format:</p><p>
<code class="literal">ModuleID/ControllerID/ActionID</code>
</p><p>We will look at each element in detail as follows:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The ModuleID is optional, so often the format is ControllerID/ActionID</li><li class="listitem">The ModuleID must be specified in the module's configuration property, under the same name</li><li class="listitem">The ControllerID and ActionID should contain only English characters in lowercase, digits, underscores, dashes, and forward slashes</li></ul></div><p>An example of route is <code class="literal">http://hostname/index.php?r=site/index</code>, where <code class="literal">site</code> is the ControllerID and <code class="literal">index</code> is the ActionID.</p><p>Starting from ControllerID, it is very easy to create the Controller class name. Just turn into uppercase the first letter of each word separated by dashes, then remove dashes and append the suffix Controller. If ControllerID contains slashes, just apply the rules to the part after the last slash in the ID. This is possible because controllers can be collected in subfolders, starting from <code class="literal">app\controllers</code>.</p><p>The following are<a id="id70" class="indexterm"></a> some examples:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Shop points to <code class="literal">app\controllers\ShopController</code></li><li class="listitem">Preferred number points to <code class="literal">app\controllers\PreferredNumberController</code></li><li class="listitem">Admin/users account points to <code class="literal">app\controllers\admin\UsersAccountController</code><div class="mediaobject"><img src="../Images/image00241.jpeg" alt="Naming convention"/></div><p style="clear:both; height: 1em;"> </p></li></ul></div><p>Routes are passed to entry script <code class="literal">basic/web/index.php</code> through the <code class="literal">r</code> parameter.</p><div class="note" title="Note"><h3 class="title"><a id="note03"></a>Note</h3><p>The default page <code class="literal">http://hostname/basic/web/index.php</code> is equivalent to <code class="literal">http://hostname/basic/web/index.php?r=site/index</code>.</p></div><div class="section" title="Configuring the debug toolbar"><div class="titlepage"><div><div><h2 class="title"><a id="ch01lvl2sec10"></a>Configuring the debug toolbar</h2></div></div></div><p>It is important to have a rich <a id="id71" class="indexterm"></a>collection of tools to make development easier in displaying some useful information about requests and responses.</p><p>For this purpose, Yii2 provides a toolbar that displays several types of info.</p><p>A common way to activate the debug toolbar is to set in <code class="literal">config/web.php</code>:</p><div class="informalexample"><pre class="programlisting">'bootstrap' =&gt; ['debug'],
'modules' =&gt; [
  'debug' =&gt; 'yii\debug\Module',
]</pre></div><p>Now you can set the following values:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><code class="literal">debug</code> to <code class="literal">bootstrap</code> config node</li><li class="listitem"><code class="literal">debug</code> to <code class="literal">modules</code> config node, using the <code class="literal">Module</code> class under <code class="literal">yii\debug\</code></li></ul></div><p>The default installation of the Yii2 basic template already enables the debug toolbar, as we can see at the bottom of the <code class="literal">config/web.php</code> configuration file. The Gii module is also enabled as well, but we will work with it later.</p><div class="informalexample"><pre class="programlisting">if (YII_ENV_DEV) {
    // configuration adjustments for 'dev' environment
    $config['bootstrap'][] = 'debug';
    $config['modules']['debug'] = 'yii\debug\Module';
    $config['bootstrap'][] = 'gii';
    $config['modules']['gii'] = 'yii\gii\Module';
}</pre></div><p>This config entry is only valid in the <code class="literal">YII_ENV_DEV</code> mode. So, we must check whether the <code class="literal">web/index.php YII_ENV</code> variable has the <code class="literal">dev</code> value (as shown in the default installation).</p><div class="mediaobject"><img src="../Images/image00242.jpeg" alt="Configuring the debug toolbar"/><div class="caption"><p>Debug toolbar closed</p></div></div><p style="clear:both; height: 1em;"> </p><p>If we try to reload the<a id="id72" class="indexterm"></a> web page at <code class="literal">basic/web/index.php</code> after these checks, we should see the following screenshot:</p><div class="mediaobject"><img src="../Images/image00243.jpeg" alt="Configuring the debug toolbar"/><div class="caption"><p>Debug toolbar opened</p></div></div><p style="clear:both; height: 1em;"> </p><p>The right arrow reports that the debug toolbar is active but closed. If we click on it, the complete toolbar will open. Now, click on any item, the debug panel will be displayed.</p><p>By default, the debug toolbar can be used only in localhost. However, if we are using Yii2 in the remote hosting environment, we set the <code class="literal">allowedIPs</code> property of the <code class="literal">debug</code> module.</p><div class="informalexample"><pre class="programlisting">$config['modules']['debug'] = [
    'class' =&gt; 'yii\debug\Module',
    'allowedIPs' =&gt; [ '127.0.0.1', '::1']
];</pre></div><p>In <code class="literal">allowedIPs</code> there is only localhost (in the IPv4 and IPv6 forms). We need to put our Internet connection and IP source address here, which can be easily found using any <code class="literal">my IP</code> service on the Internet, such<a id="id73" class="indexterm"></a> as <a class="ulink" href="http://www.whatismyip.com/">http://www.whatismyip.com/</a>.</p><p>If our IP source is, for example, <code class="literal">1.2.3.4</code>, we must add this entry to <code class="literal">allowedIPs</code>, in this way:</p><div class="informalexample"><pre class="programlisting">$config['modules']['debug'] = [
    'class' =&gt; 'yii\debug\Module',
    'allowedIPs' =&gt; [ '127.0.0.1', '::1', '1.2.3.4']
];</pre></div><p>Remember that if<a id="id74" class="indexterm"></a> we do not have an Internet connection with a static IP, this IP might change. So we need to check whether <code class="literal">allowedIPs</code> contains our current IP.</p><p>You could also use an asterisk <code class="literal">*</code> to allow all IP addresses, so you do not have to deal with dynamic IP issues. If you do this, you need to remember to remove the asterisk before deployment. Finally, at the bottom of our current configuration <code class="literal">config/web.php</code>, you will see the following code:</p><div class="informalexample"><pre class="programlisting">if (YII_ENV_DEV) {
    // configuration adjustments for 'dev' environment
    $config['bootstrap'][] = 'debug';
    $config['modules']['debug'] = [
        'class' =&gt; 'yii\debug\Module',
            'allowedIPs' =&gt; [ '127.0.0.1', '::1', '1.2.3.4']
    ];
    $config['bootstrap'][] = 'gii';
    $config['modules']['gii'] = 'yii\gii\Module';
}</pre></div><p>Let's return to the <code class="literal">basic/web/index.php</code> webpage and take a look at the debug info panel.</p><p>The debug information is distributed in the menu:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><span class="strong"><strong>Configuration</strong></span>: This is the installed PHP version and configuration and also the installed Yii2 framework version.</li><li class="listitem"><span class="strong"><strong>Request</strong></span>: This is the info about the request just sent, displaying parameters of the request, headers of the request and other useful data as response and session data.</li><li class="listitem"><span class="strong"><strong>Logs</strong></span>: This involves the actions performed by Yii2 during the execution. There are additional filters in this section to select the types of logs to be displayed.</li><li class="listitem"><span class="strong"><strong>Performance Profiling</strong></span>: This includes info about timing and duration of process.</li><li class="listitem"><span class="strong"><strong>Database</strong></span>: This includes info about all database query occurred; we can filter for type of query to locate a specific query.</li></ul></div><p>It is possible to filter all data using internal grid filter or to filter for all, latest or selecting among the last 10 rows of the log on top of the content pane.</p></div><div class="section" title="Using the logger"><div class="titlepage"><div><div><h2 class="title"><a id="ch01lvl2sec11"></a>Using the logger</h2></div></div></div><p>In the Yii2 application, the<a id="id75" class="indexterm"></a> debug info is stored using the log component. We can use this tool both in the development and production environment, but for reasons of performance and security in production, we should log only the important messages.</p><p>The default configuration file of the Yii2 basic template provides log entry in the <code class="literal">components</code> property of <code class="literal">config/web.php</code>:</p><div class="informalexample"><pre class="programlisting">'log' =&gt; [
  'traceLevel' =&gt; YII_DEBUG ? 3 : 0,
      'targets' =&gt; [
      [
             'class' =&gt; 'yii\log\FileTarget',
             'levels' =&gt; ['error', 'warning'],
      ],
    ],
],</pre></div></div><div class="section" title="Example &ndash; Hello world from scratch with the Yii basic template and bootstrap template"><div class="titlepage"><div><div><h2 class="title"><a id="ch01lvl2sec12"></a>Example &ndash; Hello world from scratch with the Yii basic template and bootstrap template</h2></div></div></div><p>It is now time to code our<a id="id76" class="indexterm"></a> first project using Yii2.</p><p>If we have not installed Yii2 yet, we will to do it now using Composer as follows:</p><div class="orderedlist"><ol class="orderedlist arabic"><li class="listitem">Open Command Prompt to the web server.</li><li class="listitem">Go to the document root of the web server (<code class="literal">/var/www</code> in a Linux machine).</li><li class="listitem">Launch these commands (as described in the <span class="emphasis"><em>Installing Yii with Composer</em></span> section):<div class="informalexample"><pre class="programlisting">
<span class="strong"><strong>curl -s http://getcomposer.org/installer | php</strong></span>
<span class="strong"><strong>php composer.phar global require "fxp/composer-asset-plugin:1.0.0"</strong></span>
<span class="strong"><strong>php composer.phar create-project --prefer-dist yiisoft/yii2-app-basic basic</strong></span>
</pre></div></li></ol><div style="height:10px; width: 1px"></div></div><p>Now, we need a fresh installation of Yii2 in the basic folder of the web server document root. Point the browser to <code class="literal">http:/hostname/basic/web</code> and we should see Yii2's congratulations page:</p><div class="mediaobject"><img src="../Images/image00244.jpeg" alt="Example &ndash; Hello world from scratch with the Yii basic template and bootstrap template"/><div class="caption"><p>An example of the Hello world page</p></div></div><p style="clear:both; height: 1em;"> </p><p>We will create<a id="id77" class="indexterm"></a> our first action to display a memorable <code class="literal">hello world</code> on the screen.</p><p>We know from the <span class="emphasis"><em>Application properties</em></span> section, in the defaultRoute entry, that the <code class="literal">SiteController</code> controller will be called when no route is specified in request.</p><p>So, we enter <code class="literal">basic/controllers</code> and open <code class="literal">SiteController.php</code>, which is the default controller.</p><p>In the <code class="literal">SiteController</code> class definition, we add a new method at the top, called <code class="literal">actionHelloWorld</code>, without parameters.</p><div class="informalexample"><pre class="programlisting">public function actionHelloWorld()
{
    echo 'hello world'
}</pre></div><p>Let's save the file and point to <code class="literal">http://hostname/basic/web/index.php?r=site/hello-world</code>.</p><p>You should see a blank page with <code class="literal">hello world</code>.</p><div class="note" title="Note"><h3 class="title"><a id="note04"></a>Note</h3><p>Pay attention when using the name route convention. Uppercase letters are translated to lowercase and dashes.</p></div><p>This is fantastic, but now we just want to put <code class="literal">hello world</code> within the page template.</p><p>We must now create a view with the content of response hello world!. In order to do this, we need to create a file named <code class="literal">helloWorld.php</code> as the name of the action under <code class="literal">views/site</code>. The naming convention need not necessarily be the same here because the view file is not automatically called from the framework.</p><p>This file only contains the <code class="literal">hello world</code> text.</p><p>We update <code class="literal">SiteController</code> with the following code:</p><div class="informalexample"><pre class="programlisting">public function actionHelloWorld()
{
    return $this-&gt;render('helloWorld');
}</pre></div><p>In the <code class="literal">actionHelloWorld()</code> method, <code class="literal">$this</code> refers to the SiteController's instance, and <code class="literal">render()</code> will insert the <code class="literal">views/helloWorld.php</code> file content in the main content layout page.</p><p>The extension<a id="id78" class="indexterm"></a> of the view file, <code class="literal">.php</code>, is automatically added from the framework to view the name parameter passed to the render method.</p><p>What if we want to pass a parameter, such as name, to <code class="literal">actionHelloWorld()</code>? Formally, we need to add just one parameter to <code class="literal">actionHelloWorld()</code> in SiteController as follows:</p><div class="informalexample"><pre class="programlisting">public function actionHelloWorld($nameToDisplay)
{
    return $this-&gt;render('helloWorld',
  [ 'nameToDisplay' =&gt; $nameToDisplay ]
    );
}</pre></div><p>Then, under <code class="literal">view/site/helloWorld.php</code> add the following code:</p><div class="informalexample"><pre class="programlisting">Hello World &lt;?php echo $nameToDisplay ?&gt;</pre></div><p>With the update of <code class="literal">actionHelloWorld()</code>, we will pass as a second parameter, an array of variables, that will be visible and used in View.</p><p>When we use parameters in the action function, we must remember that they will be mandatory and we must respect the order when passing it to the request.</p><p>To avoid this obligation, we can use the old method, parsing parameters into the function:</p><div class="informalexample"><pre class="programlisting">public function actionHelloWorld()
{
    $nameToDisplay = Yii::$app-&gt;request-&gt;get('nameToDisplay');
    // Equivalent to
// $nameToDisplay = isset($_GET['nameToDisplay'])?$_GET['nameToDisplay']:null;

    return $this-&gt;render('helloWorld',
    [ 'nameToDisplay' =&gt; $nameToDisplay ]
    );
}</pre></div><p>With this <a id="id79" class="indexterm"></a>solution, we can decide whether to pass the <code class="literal">nameToDisplay</code> parameter to request. The default value of the <code class="literal">nameToDisplay</code> parameter will be null, but we can decide to assign a different value.</p><p>The following is a URL example passing the <code class="literal">nameToDisplay</code> parameter <code class="literal">Foo</code>:</p><p>
<code class="literal">http://hostname/basic/web/index.php?r=site/hello-world&amp;nameToDisplay=Foo</code>
</p></div></div></body></html>