<?xml version="1.0" encoding="utf-8" ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.200rem;"><head><title>Placeholders formatting</title><link rel="stylesheet" href="../Styles/style0001.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.75.2"/></head><body id="page"><div class="section" title="Placeholders formatting" id="aid-29DRA1"><div class="titlepage"><div><div><h1 class="title"><a id="ch10lvl1sec71"></a>Placeholders formatting</h1></div></div></div><p>The <code class="literal">Yii:t</code> method is not <a id="id450" class="indexterm"></a>only limited to replace strings with their translation in other languages, but it handles the specific formatting of source strings to support many kinds of generalization.</p><p>Firstly, <code class="literal">Yii:t()</code> supports placeholders in the following two formats:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">String in the <code class="literal">{nameOfPlaceholder}</code> format</li><li class="listitem">Integer in the <code class="literal">{0}</code> format, and this type of placeholder is zero-based</li></ul></div><p>Value arrays to replace the placeholder are passed as the third parameter to the <code class="literal">Yii:t()</code> method.</p><p>For example, we want to display a page with only <code class="literal">Hello World, I'm ...</code> by appending the custom name to the text.</p><p>Create <code class="literal">basic/controllers/FileTranslatorController.php</code>:</p><div class="informalexample"><pre class="programlisting">    public function actionHelloWorldWithName($name='')
    {
        $text = \Yii::t('app', 'Hello World! I\'m {name}', ['name' =&gt; $name]);
        
        return $this-&gt;render('helloWorldWithName', ['text' =&gt; $text]);        
    }</pre></div><p>Now, create the view in <code class="literal">basic/views/file-translator/helloWorldWithName.php</code> simply with the following command:</p><div class="informalexample"><pre class="programlisting">&lt;?= $text ?&gt;</pre></div><p>It will display the <code class="literal">$text</code> value passed from the controller.</p><p>Test it by pointing<a id="id451" class="indexterm"></a> the browser to <code class="literal">http://hostname/basic/web/file-translator/hello-world-with-name</code>, also passing the <code class="literal">?name=</code> parameter, otherwise there will be no name at the end of the text.</p><p>Translations can be prepared using the <code class="literal">message</code> command that we have just seen:</p><div class="informalexample"><pre class="programlisting">
<span class="strong"><strong>$ ./yii message config/i18n.php</strong></span>
</pre></div><p>This will automatically create a new marker <code class="literal">Hello World! I\'m {name}</code> in the <code class="literal">basic/messages</code> subfolders.</p><p>The placeholders can be specialized with two other attributes: <code class="literal">ParameterType</code> and <code class="literal">ParameterStyle</code>, adding a comma after <code class="literal">PlaceholderName</code>. So, the full form to specify a placeholder will be as follows:</p><div class="informalexample"><pre class="programlisting">{PlaceholderName, ParameterType, ParameterStyle}</pre></div><p>Here, <code class="literal">ParameterType</code> can be:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><code class="literal">number</code> : The ParameterStyle can be an integer, currency, percent, or custom pattern (for example, 000)</li><li class="listitem"><code class="literal">date</code>: The ParameterStyle can be short, medium, long, full, or custom pattern (for example, dd/mm/yyyy)</li><li class="listitem"><code class="literal">time</code>: The ParameterStyle can be short, medium, long, full or custom pattern (for example, hh:mm)</li><li class="listitem"><code class="literal">spellout</code>: There is no ParameterStyle</li><li class="listitem"><code class="literal">ordinal</code>: There is no ParameterStyle</li><li class="listitem"><code class="literal">duration</code>: There is no ParameterStyle</li></ul></div><p>The most used message formatting is probably <code class="literal">plural</code>, and that allows us to specify different key strings based on the number passed as a parameter.</p><p>Consider the following code as an example:</p><div class="informalexample"><pre class="programlisting">// if $n = 0, it shows "There are no books!"
// if $n = 1, it shows "There is one book!"
// if $n = 4, it shows "There are 4 books!"

echo \Yii::t('app', 'There {n, plural, =0{are no books} =1{is one book} other{are # books}}!', ['n' =&gt; $n]);</pre></div><p>Here, <code class="literal">=0</code> stands<a id="id452" class="indexterm"></a> for the message to be displayed when <code class="literal">$n</code> is <code class="literal">0</code>, <code class="literal">=1</code> stands for the message to be displayed when <code class="literal">$n</code> is <code class="literal">1</code>, and <code class="literal">other</code> stands for the message to be displayed when <code class="literal">$n</code> is other than <code class="literal">0</code> and <code class="literal">1</code>.</p></div></body></html>