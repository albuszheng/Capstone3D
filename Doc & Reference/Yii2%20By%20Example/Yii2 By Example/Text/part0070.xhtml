<?xml version="1.0" encoding="utf-8" ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.200rem;"><head><title>Configuring an application using init</title><link rel="stylesheet" href="../Styles/style0001.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.75.2"/></head><body id="page"><div class="section" title="Configuring an application using init"><div class="titlepage" id="aid-22O7C2"><div><div><h1 class="title"><a id="ch09lvl1sec64"></a>Configuring an application using init</h1></div></div></div><p>Apart from <a id="id411" class="indexterm"></a>having <a id="id412" class="indexterm"></a>multiple kinds of configuration, we can have multiple entry points in advanced applications.</p><p>In advanced web applications, in fact, we also have a different approach in the development stage. We usually have two environments: development and production. In the first one, we make tests using fake users, data, and so on, while in the second one we must take care to guarantee the proper functioning of the project.</p><p>Therefore, we will have different sets of configuration files and parameters based on environments where we will work in.</p><p>We could wish, in fact, to test the application using the development database instead of the production database, or specific parameters available only in a specific environment.</p><p>Indeed, the <code class="literal">init</code> command offers this capability to switch different configuration and parameters for different environments. Basically, there are two environments: development and production.</p><div class="note" title="Note"><h3 class="title"><a id="note59"></a>Note</h3><p>A first initialization is needed to make sure that the project could work.</p></div><p>The <code class="literal">init</code> command<a id="id413" class="indexterm"></a> can be launched both in interactive mode as well <a id="id414" class="indexterm"></a>as in noninteractive (silent) one.</p><p>In the interactive mode, starting from the <code class="literal">yiiadv</code> folder:</p><div class="informalexample"><pre class="programlisting">
<span class="strong"><strong>$ php init</strong></span>
</pre></div><p>And in a noninteractive (silent) mode:</p><div class="informalexample"><pre class="programlisting">
<span class="strong"><strong>$ php init --env=Development --overwrite=All</strong></span>
</pre></div><p>In both modalities, we need to specify only the target environment if we want to overwrite all the current configuration files.</p><p>This command will simply copy the content of the chosen environment (according to the type of selected environment) in the respective application folder, with the same name starting from root.</p><p>For example, open the folder in <code class="literal">environments/dev/backend</code>. We will see two folders: <code class="literal">config</code> and <code class="literal">web</code>, containing the first two configuration files and the other files <code class="literal">index.php</code> and <code class="literal">index-test.php</code>. These files will overwrite the corresponding files in the <code class="literal">backend</code> folder starting from the root folder of the project.</p><p>So, if we launch the preceding command with parameters of <code class="literal">init</code>, the content of the folders in <code class="literal">environments/dev</code> (the <code class="literal">backend</code>, <code class="literal">common</code>, <code class="literal">console</code>, and <code class="literal">frontend</code> folders) will be copied in the <code class="literal">backend</code>, <code class="literal">common</code>, <code class="literal">console</code>, and <code class="literal">frontend</code> folders starting from the root folder of the project.</p><p>Also, with this command, other operations such as making some folders writable or applying specific values to configuration properties, are accomplished. However, the <code class="literal">init</code> command is mainly used to switch different configurations and <code class="literal">index.php</code> files.</p><p>Starting from any application of the project (backend, frontend, common, and console), configuration values and parameters taken from the top of any application's <code class="literal">index.php</code> file (backend, frontend, common, or console) are read in the following sequence:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><code class="literal">common/config/main.php</code></li><li class="listitem"><code class="literal">common/config/main-local.php</code></li><li class="listitem"><code class="literal">config/main.php</code></li><li class="listitem"><code class="literal">config/main-local.php</code></li></ul></div><p>This means that the <code class="literal">config</code> parameters are initially read firstly from <code class="literal">common/config/main.php</code> then from <code class="literal">common/config/main-local.php</code>, then again from <code class="literal">application config/main.php</code>, and finally from <code class="literal">application config/main-local.php</code>. The properties with same name will be overwritten during the reading of other configuration files.</p><p>Therefore, if the same configuration property is declared in all four configuration files, its value will be the same as <code class="literal">config/main-local.php</code>, which is the last configuration file to be read.</p><p>Since, we locally have a last chance to apply differences towards a specific property of configuration with the <code class="literal">-local</code> version of files, the content of environment subfolders will be only about the <code class="literal">-local</code> version of a specific file. For example, if we open <code class="literal">environments/dev/backend/config path</code>, we will see only <code class="literal">main-local.php</code> and <code class="literal">params-local.php</code>, practically the last two filenames that <code class="literal">index.php</code> will read in sequence.</p><p>So if we change <a id="id415" class="indexterm"></a>the database connection parameters in <code class="literal">environments/dev/backend/config/main-local.php</code> and then apply <code class="literal">init</code> with the <code class="literal">dev</code> target<a id="id416" class="indexterm"></a> environment, this file will overwrite <code class="literal">backend/config/main-local.php</code>. This is the last configuration file that <code class="literal">backend/web/index.php</code> will read during its bootstrap (if we browse <code class="literal">/backend/web/index.php</code>).</p><p>Now that we have executed the <code class="literal">init</code> command in the <code class="literal">dev</code> environment, we can point the browser to <code class="literal">http://hostname/yiiadv/frontend/web</code> and we should see the same congratulations page of the basic template.</p><p>In the same way, the backend entry point is also available pointing to <code class="literal">http://hostname/yiiadv/backend/web</code>, where a login form is displayed by default (this is because it is a restricted area).</p><div class="note" title="Note"><h3 class="title"><a id="note60"></a>Note</h3><p>If we want to add a new application in the project, it is enough to copy the content of frontend or backend folder to another new folder in the project.</p></div><div class="section" title="Example &ndash; creating frontend for public access"><div class="titlepage"><div><div><h2 class="title"><a id="ch09lvl2sec43"></a>Example &ndash; creating frontend for public access</h2></div></div></div><p>As we have seen, the frontend application is a reachable pointing browser to <code class="literal">http://hostname/yiiadv/frontend/web</code>.</p><p>However, the <a id="id417" class="indexterm"></a>first thing to set in the frontend access is URL-friendly<a id="id418" class="indexterm"></a> customization; this is because it is important that our public website is well positioned in the search engine.</p><p>As we have done in the basic template, we can render pretty URLs in the advanced template too, following these two steps:</p><div class="orderedlist"><ol class="orderedlist arabic"><li class="listitem">Create the <code class="literal">.htaccess</code> file in <code class="literal">yiiadv/frontend/web</code>.</li><li class="listitem">Add the <code class="literal">urlManager</code> component in <code class="literal">yiiadv/frontend/config/main.php</code>.</li></ol><div style="height:10px; width: 1px"></div></div><p>In step 1, it is enough to create a file in <code class="literal">yiiadv/frontend/web/.htaccess</code> with the following content:</p><div class="informalexample"><pre class="programlisting">RewriteEngine on

# If a directory or a file exists, use it directly
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
# Otherwise forward it to index.php
RewriteRule . index.php</pre></div><p>This code will make the web server URL rewrite work, rewriting all requests to the <code class="literal">index.php</code> file in <code class="literal">yiiadv/frontend/web</code>.</p><p>While, in step 2, we must add the <code class="literal">urlManager</code> property in <code class="literal">yiiadv/frontend/config/main.php</code>:</p><div class="informalexample"><pre class="programlisting">         'urlManager' =&gt; [
            'enablePrettyUrl' =&gt; true,
            'showScriptName' =&gt; false,
        ],</pre></div><p>Now we can refresh the web browser to <code class="literal">http://hostname/yiiadv/frontend/web</code> and navigation to the URL link on the top, and we can see, for instance, that URL is in pretty form.</p><p>We can consider the <code class="literal">frontend</code> folder as a Yii standalone application and we can create controllers, views, models, and so on.</p></div></div></body></html>