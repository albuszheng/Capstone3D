<?xml version="1.0" encoding="utf-8" ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.200rem;"><head><title>Using multiple layouts</title><link rel="stylesheet" href="../Styles/style0001.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.75.2"/></head><body id="page"><div class="section" title="Using multiple layouts" id="aid-PNV61"><div class="titlepage"><div><div><h1 class="title"><a id="ch02lvl1sec21"></a>Using multiple layouts</h1></div></div></div><p>During the building of <a id="id118" class="indexterm"></a>a website or a web application, usually it could be required to render different views with different layouts. Think about, for example, the lists and details of news made in this chapter.</p><p>The layout is managed by the <code class="literal">$layout</code> property of <code class="literal">Controller</code>; <code class="literal">main</code> is the default value for this property.</p><p>Just set this property to change the layout file where to render the content of the view.</p><p>There are some important rules to write the value of the <code class="literal">$layout</code> property:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">A path alias (for example, <code class="literal">@app/views/layouts/main</code>).</li><li class="listitem">An absolute path (for example, <code class="literal">/main</code>) is where the layout value starts with a slash. The actual layout file will be looked for under the application layout path, which defaults to <code class="literal">@app/views/layouts</code>.</li><li class="listitem">A relative path (for example, <code class="literal">main</code>) is where the actual layout file will be looked for under the context module's layout path, which defaults to the <code class="literal">views/layouts</code> directory under the module directory.</li><li class="listitem">The Boolean value false is where no layout will be applied.<div class="note" title="Note"><h3 class="title"><a id="note13"></a>Note</h3><p>If the layout value does not contain a file extension, it will use the default <code class="literal">.php</code>.</p></div></li></ul></div><div class="section" title="Example &ndash; using different layouts to create responsive and nonresponsive content layout for the same view"><div class="titlepage"><div><div><h2 class="title"><a id="ch02lvl2sec18"></a>Example &ndash; using different layouts to create responsive and nonresponsive content layout for the same view</h2></div></div></div><p>In this example, we will<a id="id119" class="indexterm"></a> create a new action in <code class="literal">NewsController</code> that will change its layout depending on a value passed in the URL.</p><p>First, add a new action in <code class="literal">NewsController</code> called <code class="literal">actionResponsiveContentTest</code>:</p><div class="informalexample"><pre class="programlisting">public function actionResponsiveContentTest()
{
  $responsive =  Yii::$app-&gt;request-&gt;get('responsive', 0);

  if($responsive)
  {
    $this-&gt;layout = 'responsive';
  }
  else
  {
    $this-&gt;layout = 'main';
  }

  return $this-&gt;render('responsiveContentTest', ['responsive' =&gt; $responsive]);
}</pre></div><p>In this action, we get a responsive parameter from the URL and set the <code class="literal">$responsive</code> variable to this value or 0 if not passed.</p><p>Then, set the <code class="literal">$layout</code> property of <code class="literal">Controller</code> to responsive or not according to the <code class="literal">$responsive</code> value, and pass this variable to view.</p><p>Then, create a new<a id="id120" class="indexterm"></a> view in <code class="literal">views/news/responsiveContentTest.php</code>:</p><div class="informalexample"><pre class="programlisting">&lt;?php if($responsive) { ?&gt;
  This layout contains responsive content
&lt;?php } else { ?&gt;
  This layout does not contain responsive content
&lt;?php } ?&gt;</pre></div><p>This displays a different text block according to the <code class="literal">$responsive</code> value.</p><p>Finally, make a clone of main layout copying <code class="literal">views/layouts/main.php</code> in <code class="literal">views/layouts/responsive.php</code> and change in a new file <code class="literal">views/layouts/responsive.php</code>:</p><div class="informalexample"><pre class="programlisting">&lt;div class="container"&gt; in &lt;div class="container-fluid" style="padding-top:60px"&gt;</pre></div><p>This change makes the div container fluid (responsive), in other words, its content is resized with respect to percentage available in the horizontal space (instead the fixed value).</p><p>If we point to <code class="literal">http://hostname/basic/web/index.php?r=news/responsive-content-test</code>, we will see content in a fixed layout. Instead, if we pass the <code class="literal">responsive </code>parameter with value 1, <code class="literal">http://hostname/basic/web/index.php?r=news/responsive-content-test&amp;responsive=1</code>, we will see the content in a full width screen.</p></div></div></body></html>