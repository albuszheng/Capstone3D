<?xml version="1.0" encoding="utf-8" ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.200rem;"><head><title>Chapter&nbsp;2.&nbsp;Creating a Simple News Reader</title><link rel="stylesheet" href="../Styles/style0001.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.75.2"/></head><body id="page"><div class="chapter" title="Chapter&nbsp;2.&nbsp;Creating a Simple News Reader" id="aid-J2B81"><div class="titlepage"><div><div><h1 class="title"><a id="ch02"></a>Chapter&nbsp;2.&nbsp;Creating a Simple News Reader</h1></div></div></div><p>This chapter explains how to write your first controller in order to display news items list and details, make interactions between controllers and views, and then customize the view's layout.</p><p>In this chapter, we will go through the following:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Creating controller and action</li><li class="listitem">Creating a view to display the news list</li><li class="listitem">How the controller sends the data to view<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Example &ndash; create a controller to display the static news items list and details</li></ul></div></li><li class="listitem">Split the common view content into reusable views<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Example &ndash; render partial in view</li></ul></div></li><li class="listitem">Creating static pages</li><li class="listitem">Share data between views and layout<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Example &ndash; change layout background based on the URL parameter</li></ul></div></li><li class="listitem">Layout with dynamic blocks<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Example &ndash; add dynamic box to display advertising info</li></ul></div></li><li class="listitem">Using multiple layouts<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Example &ndash; using different layout to create responsive and not responsive layout for the same view</li></ul></div></li></ul></div><div class="section" title="Creating Controller and Action"><div class="titlepage"><div><div><h1 class="title"><a id="ch02lvl1sec14"></a>Creating Controller and Action</h1></div></div></div><p>In order to handle a request, the first thing to do is to create a new <a id="id80" class="indexterm"></a>controller.</p><p>The things you must <a id="id81" class="indexterm"></a>remember while creating a file controller<a id="id82" class="indexterm"></a> are as follows:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The namespace at the top (in basic application usually app\controllers)</li><li class="listitem">The <code class="literal">use</code> path for used class</li><li class="listitem">The controller class must extend the <code class="literal">yii\web\Controller</code> class</li><li class="listitem">The actions are handled from controller functions whose name starts with <code class="literal">action</code> and the first letter of each word is in uppercase</li></ul></div><p>Let's point to <code class="literal">basic/controllers</code> and create a file named <code class="literal">NewsController.php</code>.</p><p>Then, create a class with the same name as the file and extend it from controller; finally, create an action named <code class="literal">index</code> to manage request for <code class="literal">news/index</code>:</p><div class="informalexample"><pre class="programlisting">&lt;?php

// 1. specify namespace at the top (in basic application usually app\controllers);
namespace app\controllers;

// 2. specify 'use' path for used class;
use Yii;
use yii\web\Controller;

// 3. controller class must extend yii\web\Controller class;
// This line is equivalent to
// class NewsController extends yii\web\Controller
class NewsController extends Controller
{
// 4. actions are handled from controller functions whose name starts with 'action' and the first letter of each word is uppercase;
    public function actionIndex()
    {
            echo "this is my first controller";
    }
}</pre></div><p>If we try to point the browser to <code class="literal">http://hostname/basic/web/index.php?r=news/index</code>, we will see a blank page with the notice <span class="strong"><strong>this is my first controller</strong></span>.</p><p>Now, let's see which common errors can occur when we ignore those four things to remember mentioned at the top of this chapter.</p><p>The <a id="id83" class="indexterm"></a>namespace defines the hierarchical organization for names <a id="id84" class="indexterm"></a>used in our application. If we forget to declare a namespace, Yii2 with <code class="literal">YII_DEBUG</code> set to true in <code class="literal">web/index.php</code>, will display the following error message:</p><div class="mediaobject"><img src="../Images/image00245.jpeg" alt="Creating Controller and Action"/><div class="caption"><p>The missing Controller namespace</p></div></div><p style="clear:both; height: 1em;"> </p><p>Yii2 reports an error in an excellent way, giving us the possibility to solve it by checking if we are missing the namespace.</p><p>Then, the <code class="literal">Use</code> keyword is employed to specify the complete path of a class in the application. A class that has a <code class="literal">path/to/class/ClassName</code> complete path, can be referenced in the app using only <code class="literal">ClassName</code> if we put an <code class="literal">use  path/to/class/ClassName</code> just after namespace declaration.</p><p>However, if we use just <code class="literal">ClassName</code> without defining the <code class="literal">use</code> declaration at the top of the file, an error such as the following can occur:</p><div class="mediaobject"><img src="../Images/image00246.jpeg" alt="Creating Controller and Action"/></div><p style="clear:both; height: 1em;"> </p><p>This error is simple to explain, but harder to find, especially for beginners.</p><p>In this case, the screenshot shows that it has been used the <code class="literal">Controller</code> name (after the <code class="literal">extends</code> keyword) at row 9. Since there is no complete path for the <code class="literal">Controller</code> class name, Yii2 will try to look for the <code class="literal">Controller</code> class under <code class="literal">app\controllers</code>, without finding it.</p><p>To solve<a id="id85" class="indexterm"></a> this problem, we must change <code class="literal">Controller</code> with <code class="literal">yii\web\Controller</code> at row 9 and for all the next rows that will use the <code class="literal">Controller</code> class name <a id="id86" class="indexterm"></a>without defining a complete class path, or that insert a <code class="literal">use</code> declaration at the top of the file, we must employ <code class="literal">yii\web\Controller</code>.</p><p>A controller is always a subclass of <code class="literal">yii\web\Controller</code> or simply, if we have used the keyword <code class="literal">use</code>, a subclass of <code class="literal">Controller</code>. Action names follow the rules described in the previous chapter.</p></div></div></body></html>