<?xml version="1.0" encoding="utf-8" ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.200rem;"><head><title>Chapter&nbsp;9.&nbsp;Frontend to Display Rooms to Everyone</title><link rel="stylesheet" href="../Styles/style0001.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.75.2"/></head><body id="page"><div class="chapter" title="Chapter&nbsp;9.&nbsp;Frontend to Display Rooms to Everyone" id="aid-21PMQ1"><div class="titlepage"><div><div><h1 class="title"><a id="ch09"></a>Chapter&nbsp;9.&nbsp;Frontend to Display Rooms to Everyone</h1></div></div></div><p>This chapter will cover topics about using templates to have multiple apps in the same context.</p><p>Yii, indeed, allows you to have an advanced installation able to contain multiple instances of an Yii application. Therefore, every folder in the project is actually a new Yii application.</p><p>We will see how to install and configure the project, share data between them, and finally customize the URL to make them pretty for the search engine.</p><p>We will cover the following topics in this chapter:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Using an advanced template to split frontend and backend</li><li class="listitem">Configuring an application using init<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Example &ndash; creating frontend for public access</li></ul></div></li><li class="listitem">Sharing ActiveRecord models among applications<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Example &ndash; displaying available rooms in frontend site</li></ul></div></li><li class="listitem">Customizing a URL in an advanced template<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Example &ndash; using advanced templates in the same domain</li></ul></div></li><li class="listitem">How to use advanced templates in shared hosting</li></ul></div><div class="section" title="Using an advanced template to split frontend and backend"><div class="titlepage"><div><div><h1 class="title"><a id="ch09lvl1sec63"></a>Using an advanced template to split frontend and backend</h1></div></div></div><p>Until <a id="id399" class="indexterm"></a>now, we <a id="id400" class="indexterm"></a>have <a id="id401" class="indexterm"></a>seen simple<a id="id402" class="indexterm"></a> applications with only one single entry point to access. However, a single entry point isn't enough for more general applications. In advanced web applications, in fact, we have not just a single entry point but often three: frontend, backend, and a common area used as shared zone for every entry point.</p><p>The frontend entry point is a public access that is available to all users without restrictions.</p><p>On the other hand, the backend entry point is a restricted access available only for authenticated users that have administration roles for managing content in the web application.</p><p>Finally, the common entry point is used to share data between entry points.</p><p>Think about a reservation system, where frontend is the website displaying room availability and prices, while backend is the administration area, where operators can manage rooms.</p><p>In the same way, another example of frontend and backend could be a newspaper website that comprises a frontend area with news publically visible to all users, and a backend area where journalists can insert news.</p><p>Now that we <a id="id403" class="indexterm"></a>know the differences between <a id="id404" class="indexterm"></a>frontend and backend and their aim, we will<a id="id405" class="indexterm"></a> create an advanced Yii application.</p><p>The steps to install an <a id="id406" class="indexterm"></a>advanced template of the Yii application are similar to the ones to install basic templates.</p><div class="note" title="Note"><h3 class="title"><a id="note57"></a>Note</h3><p>It is highly recommended, at this point, to have a console access the host, where we can put files.</p></div><p>Locate the web hosting document root folder in the web hosting. Starting from it, we will launch commands to create the advanced application in a new subfolder named <code class="literal">yiiadv</code>, which stands for Yii installation with the advanced template.</p><p>We will install the Yii advanced template using Composer as it is the most recommended way. If we have not installed Composer as the global application yet, we can install it now in the <code class="literal">yiiadv</code> folder.</p><p>The following are the instructions to install Yii advanced template starting from document root folder:</p><div class="informalexample"><pre class="programlisting">
<span class="strong"><strong>$ curl -sS https://getcomposer.org/installer | php</strong></span>
<span class="strong"><strong>$ php composer.phar global require "fxp/composer-asset-plugin:~1.0.0"</strong></span>
<span class="strong"><strong>$ php composer.phar create-project --prefer-dist yiisoft/yii2-app-advanced yiiadv</strong></span>
</pre></div><p>By opening the <code class="literal">yiiadv</code> subfolder, we can see some new folders beside the basic template, which are as follows:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><code class="literal">backend</code>: This folder is the entry point for the backend application of the project</li><li class="listitem"><code class="literal">common</code>: This folder is the entry point for the application containing common data for the other applications in the project</li><li class="listitem"><code class="literal">console</code>: This folder is the entry point for the console application of the project</li><li class="listitem"><code class="literal">frontend</code>: This folder is the entry point for the frontend application of the project</li></ul></div><p>This structure is the result of the experience on developing the web application. Backend and frontend entry points have been formerly discussed; the common entry point is an area where to put data (common models, components, and so on) shared among all the other applications in the project.</p><div class="note" title="Note"><h3 class="title"><a id="note58"></a>Note</h3><p>Every application in the project (backend, frontend, common, and console) is considered as a single namespace in the web application. So, when we refer to <code class="literal">RoomsController</code> in the frontend, the complete class namespace will be <code class="literal">frontend/controllers/RoomsController</code>.</p></div><p>This<a id="id407" class="indexterm"></a> installation is still raw and requires an <a id="id408" class="indexterm"></a>initialization using the <code class="literal">init</code> command. However, if <a id="id409" class="indexterm"></a>we try to open any of these applications, we <a id="id410" class="indexterm"></a>can recognize the same basic template structure with <code class="literal">assets</code>, <code class="literal">config</code>, <code class="literal">controllers</code>, <code class="literal">models</code>, <code class="literal">runtime</code>, <code class="literal">views</code>, and <code class="literal">web</code> subfolders. So, a basic template application can be considered the only unique application in an advanced template one.</p><p>Finally, in the advanced template properties, every application starting point is always in <code class="literal">web/index.php</code>. For example, for the frontend application, the starting point is <code class="literal">frontend/web/index.php</code>.</p></div></div></body></html>