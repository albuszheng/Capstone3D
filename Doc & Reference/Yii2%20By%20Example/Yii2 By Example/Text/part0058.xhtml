<?xml version="1.0" encoding="utf-8" ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.200rem;"><head><title>Chapter&nbsp;7.&nbsp;Working on the User Interface</title><link rel="stylesheet" href="../Styles/style0001.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.75.2"/></head><body id="page"><div class="chapter" title="Chapter&nbsp;7.&nbsp;Working on the User Interface"><div class="titlepage" id="aid-1NA0K2"><div><div><h1 class="title"><a id="ch07"></a>Chapter&nbsp;7.&nbsp;Working on the User Interface</h1></div></div></div><p>In this chapter, you will discover how powerful Gii is as a tool. It provides support for CRUD actions, as well as creating a controller and its respective views.</p><p>We will cover the following topics related to the user interface in this chapter:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Using Gii to generate create, read, update, and delete (CRUD) actions:<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">For example &ndash; using CRUD to manage rooms, reservations, and customers using Gii</li></ul></div></li><li class="listitem">Customizing JavaScript and CSS:<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">For example &ndash; using JavaScript and CSS to display advertising columns that disappear if there is not enough space available</li></ul></div></li><li class="listitem">Using AJAX:<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">For example: reservation details loaded from customers' drop-down lists</li></ul></div></li><li class="listitem">Using the Bootstrap widget:<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">For example &ndash; using datepicker</li></ul></div></li><li class="listitem">Viewing multiple models in the same view:<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">For example &ndash; saving multiple customers at the same time</li></ul></div></li><li class="listitem">Saving linked models in the same view:<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">For example &ndash; creating a customer and reservation in the same view</li></ul></div></li></ul></div><p>It is now time for you to learn what Yii2 supports in order to customize the JavaScript and CSS parts of web pages. A recurrent use of JavaScript is to handle AJAX calls, that is, to manage widgets and compound controls (such as a dependent drop-down list) from jQuery and Bootstrap.</p><p>Finally, we will employ jQuery to dynamically create more models from the same class in the form, which will be passed to the controller in order to be validated and saved.</p><div class="section" title="Using Gii to generate CRUD"><div class="titlepage"><div><div><h1 class="title"><a id="ch07lvl1sec52"></a>Using Gii to generate CRUD</h1></div></div></div><p>We introduced <a id="id317" class="indexterm"></a>Gii in <a class="link" title="Chapter&nbsp;5.&nbsp;Developing a Reservation System" href="part0041.xhtml#aid-173722">Chapter 5</a>, <span class="emphasis"><em>Developing a Reservation System</em></span>, to <a id="id318" class="indexterm"></a>generate models. Now we want to use Gii to create CRUD actions with a controller and views.</p><p>Type <code class="literal">http://hostname/basic/web/gii</code> in your browser to return to the Gii welcome page. Click on the <span class="strong"><strong>Start</strong></span> button of the <span class="strong"><strong>CRUD</strong></span> section. We have to fill out four fields:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><span class="strong"><strong>Model Class</strong></span>: This is the ActiveRecord class associated with the table where CRUD will be built; this class should be provided using the fully qualified namespaced path, for example: <code class="literal">app\models\ModelClass</code>.</li><li class="listitem"><span class="strong"><strong>Search Model Class</strong></span>: This is the name of the search model class to be generated and extended from the model class; this class will provide useful methods and extensions to be used when searching the record. This should be provided using the fully qualified namespaced path, for example: <code class="literal">app\models\ModelClassSearch</code>.</li><li class="listitem"><span class="strong"><strong>Controller Class</strong></span>: This is the name of the controller class to be generated; this class should be provided using the fully qualified namespaced path and the CamelCase format for the name, starting with an uppercase letter, for example: <code class="literal">app\controller\MyCustomController</code>.</li><li class="listitem"><span class="strong"><strong>View Path</strong></span>: This is the directory where the view created from the controller actions will be stored. We can use path, alias <code class="literal">@app/views</code>, to indicate the base path for the views file, for example: <code class="literal">@app/views/myCustom</code> to indicate the base path of the <code class="literal">MyCustomController</code> views, that will be filled by default to <code class="literal">@app/views/controller-id</code>.</li></ul></div><p>Then, we can customize <code class="literal">BaseControllerClass</code>, the widget used in the index page, to enable the state of I18N and the code template, but it is okay to leave them with the default values.</p><div class="note" title="Note"><h3 class="title"><a id="note45"></a>Note</h3><p>If we check <span class="strong"><strong>Enable I18N</strong></span>, we must then look after the translations in app messages for each attribute label. This will be covered in a later chapter.</p></div><div class="section" title="Example &ndash; using CRUD to manage rooms, reservations, and customers using Gii"><div class="titlepage"><div><div><h2 class="title"><a id="ch07lvl2sec33"></a>Example &ndash; using CRUD to manage rooms, reservations, and customers using Gii</h2></div></div></div><p>In this example, we <a id="id319" class="indexterm"></a>will create <a id="id320" class="indexterm"></a>complete <a id="id321" class="indexterm"></a>CRUD actions to manage rooms, reservations, and customers.</p><p>In the earlier chapter, we dealt with Gii CRUD actions to create a form. We must now repeat these instructions for all three models: the room, reservation, and customer model class. To distinguish files created with Gii from files created manually in the previous chapters, we will append the Gii suffix to the controller's class name.</p><p>Browse to the Gii welcome page at <code class="literal">http://hostname/basic/web/gii</code>, click on the <span class="strong"><strong>Start</strong></span> button in the <span class="strong"><strong>CRUD</strong></span> section, and fill out the fields with the following values to create CRUD actions for the <code class="literal">Room</code> model class:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><span class="strong"><strong>Model Class</strong></span>: <code class="literal">app\models\Room</code></li><li class="listitem"><span class="strong"><strong>Search Model Class</strong></span>: <code class="literal">app\models\RoomSearch</code></li><li class="listitem"><span class="strong"><strong>Controller Class</strong></span>: <code class="literal">app\controllers\RoomsWithGiiController</code></li><li class="listitem"><span class="strong"><strong>View Path</strong></span>: <code class="literal">@app/views/rooms-with-gii</code></li></ul></div><p>Then, repeat this operation for the <code class="literal">Reservation</code> model class:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><span class="strong"><strong>Model Class</strong></span>: <code class="literal">app\models\Reservation</code></li><li class="listitem"><span class="strong"><strong>Search Model Class</strong></span>: <code class="literal">app\models\ReservationSearch</code></li><li class="listitem"><span class="strong"><strong>Controller Class</strong></span>: <code class="literal">app\controllers\ReservationsWithGiiController</code></li><li class="listitem"><span class="strong"><strong>View Path</strong></span>: <code class="literal">@app/views/reservations-with-gii</code></li></ul></div><p>Finally, repeat them for the <code class="literal">Customer</code> model class:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><span class="strong"><strong>Model Class</strong></span>: <code class="literal">app\models\Customer</code></li><li class="listitem"><span class="strong"><strong>Search Model Class</strong></span>: <code class="literal">app\models\CustomerSearch</code></li><li class="listitem"><span class="strong"><strong>Controller Class</strong></span>: <code class="literal">app\controllers\CustomersWithGiiController</code></li><li class="listitem"><span class="strong"><strong>View Path</strong></span>: <code class="literal">@app/views/customers-with-gii</code><div class="note" title="Note"><h3 class="title"><a id="note46"></a>Note</h3><p>Make sure that the View Path has a slash (<code class="literal">/</code>) in the path and not a backslash (<code class="literal">\</code>) as the namespaced path in the model class, search model class, and controller class.</p></div></li></ul></div><p>The following screenshot shows the fields filled out to generate CRUD actions for the <code class="literal">Room</code> model class:</p><div class="mediaobject"><img src="../Images/image00275.jpeg" alt="Example &ndash; using CRUD to manage rooms, reservations, and customers using Gii"/><div class="caption"><p>CRUD Generator from Gii</p></div></div><p style="clear:both; height: 1em;"> </p><p>While navigating <a id="id322" class="indexterm"></a>in the folder structure, you will see that Gii has<a id="id323" class="indexterm"></a> created three new files in <code class="literal">basic/controllers</code>, named <code class="literal">RoomsWithGiiController.php</code>, <code class="literal">ReservationsWithGiiController.php</code>, <a id="id324" class="indexterm"></a>and <code class="literal">CustomersWithGiiController.php</code>.</p><p>Each of these files contains five actions:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><code class="literal">actionCreate()</code>: This action is used to create a new model object</li><li class="listitem"><code class="literal">actionView()</code>: This action is used to view the details of a model object</li><li class="listitem"><code class="literal">actionUpdate()</code>: This action is used to update an existing model object</li><li class="listitem"><code class="literal">actionDelete()</code>: This action is used to delete an existing model object</li><li class="listitem"><code class="literal">actionIndex()</code>: This action is used to display, using the grid layout, a list of model objects</li></ul></div><p>Open the <code class="literal">basic/models</code> folder <a id="id325" class="indexterm"></a>and you will find three new files: <code class="literal">RoomSearch.php</code>, <code class="literal">ReservationSearch.php</code> (which should already exist), and <code class="literal">CustomerSearch.php</code>.</p><p>Each of these files <a id="id326" class="indexterm"></a>basically contains a <code class="literal">search()</code> method, which <a id="id327" class="indexterm"></a>returns the ActiveDataProvider to be used to display data in GridView, passing some filter conditions.</p><p>Finally, open the <code class="literal">basic/views</code> folder and you will find three new folders: <code class="literal">roomsWithGii</code>, <code class="literal">reservationsWithGii</code>, and <code class="literal">customersWithGii</code>; each one containing six files:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><code class="literal">_form.php</code></li><li class="listitem"><code class="literal">_search.php</code></li><li class="listitem"><code class="literal">create.php</code></li><li class="listitem"><code class="literal">index.php</code></li><li class="listitem"><code class="literal">update.php</code></li><li class="listitem"><code class="literal">view.php</code></li></ul></div><p>View files that start with an underscore are considered by default in Yii2 as subviews, or rather views that are called by other views.</p><p>The first two files start with an underscore; effectively if we open <code class="literal">create.php</code> and <code class="literal">update.php</code>, we will notice that, at the end of these files, the <code class="literal">render()</code> method is called using the <code class="literal">_form.php</code> view. Both the create and update view will use the same <code class="literal">_form</code> view to display the form to edit fields.</p><p>The last four files, <code class="literal">create.php</code>, <code class="literal">index.php</code>, <code class="literal">update.php</code>, and <code class="literal">view.php</code> are views that refer to the same actions in the controller. By default, they all have a breadcrumb and a title for each page.</p><p>Make some tests that browse, for example, to <code class="literal">http://hostname/basic/web/rooms-with-gii/index</code> or <code class="literal">http://hostname/basic/web/rooms-with-gii/index</code>, to see some excellent works made by Gii.</p><p>This is the index action result of <code class="literal">RoomsWithGiiController</code>:</p><div class="mediaobject"><img src="../Images/image00276.jpeg" alt="Example &ndash; using CRUD to manage rooms, reservations, and customers using Gii"/><div class="caption"><p>The output of the RoomsWithGiiController index action</p></div></div><p style="clear:both; height: 1em;"> </p></div></div></div></body></html>