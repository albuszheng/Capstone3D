<?xml version="1.0" encoding="utf-8" ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.200rem;"><head><title>Customizing a URL in the advanced template</title><link rel="stylesheet" href="../Styles/style0001.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.75.2"/></head><body id="page"><div class="section" title="Customizing a URL in the advanced template" id="aid-24L8G1"><div class="titlepage"><div><div><h1 class="title"><a id="ch09lvl1sec66"></a>Customizing a URL in the advanced template</h1></div></div></div><p>When working with <a id="id429" class="indexterm"></a>multiple applications in the <a id="id430" class="indexterm"></a>same project, you might require access from an application to another, for example, from the backend to a frontend link. This is because we want to display public page rendering in the frontend after inserting data in the backend.</p><p>The <code class="literal">urlManager </code>property is customized with references about the application where it is defined. However, we can add specific properties to refer to the respective application.</p><p>Therefore, in <code class="literal">common/config/main.php</code>, we can add these two properties:</p><div class="informalexample"><pre class="programlisting">        'urlManagerFrontend' =&gt; [
            'class' =&gt; 'yii\web\urlManager',
            'baseUrl' =&gt; '/yiiadv/frontend/web',
            'enablePrettyUrl' =&gt; true,
            'showScriptName' =&gt; false,
        ],      
        
        'urlManagerBackend' =&gt; [
            'class' =&gt; 'yii\web\urlManager',
            'baseUrl' =&gt; '/yiiadv/backend/web',
            'enablePrettyUrl' =&gt; true,
            'showScriptName' =&gt; false,
        ],</pre></div><p>For example, we can get a URL to frontend from everywhere. It is enough to write this code <code class="literal">echo Yii::$app-&gt;urlManagerFrontend-&gt;createUrl(...)</code> to create a URL from frontend.</p><div class="note" title="Note"><h3 class="title"><a id="note64"></a>Note</h3><p>It is necessary to put the <code class="literal">.htaccess</code> file in the <code class="literal">web</code> folder of each application that has the <code class="literal">enablePrettyUrl</code> property in the <code class="literal">urlManager</code> configuration.</p></div><p>Yii also provides convenient <a id="id431" class="indexterm"></a>aliases to application paths, other than<a id="id432" class="indexterm"></a> the default aliases of the basic template:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><code class="literal">@common</code>: This is the common directory</li><li class="listitem"><code class="literal">@frontend</code>: This is the frontend web application directory</li><li class="listitem"><code class="literal">@backend</code>: This is the backend web application directory</li><li class="listitem"><code class="literal">@console</code>: This is the console directory</li></ul></div><div class="section" title="Example &ndash; using the advanced template in the same domain"><div class="titlepage"><div><div><h2 class="title"><a id="ch09lvl2sec45"></a>Example &ndash; using the advanced template in the same domain</h2></div></div></div><p>We have seen that <a id="id433" class="indexterm"></a>the advanced template creates more applications in the same web application than we can reach using <code class="literal">/frontend</code> or <code class="literal">/backend</code> or any other application name prefix in the URL. However, it is not advisable, especially for frontend, that all URLs contain a <code class="literal">/frontend</code> prefix.</p><p>We want to have this URL format for frontend: <code class="literal">http://hostname/yiiadv/</code>; and this one for backend: <code class="literal">http://hostname/yiiadv/admin</code> (we can choose the name we want).</p><p>All requests have to be managed on the <code class="literal">/yiiadv</code> folder level. So, we will add an <code class="literal">.htaccess</code> file in the <code class="literal">/yiiadv</code> folder that it will dispatch to the correct route.</p><p>Here is a list of the actions that must be performed:</p><div class="orderedlist"><ol class="orderedlist arabic"><li class="listitem">Configure <code class="literal">.htaccess</code> in <code class="literal">/yiiadv</code> to handle all requests.</li><li class="listitem">Configure the backend application to customize its <code class="literal">baseUrl</code>.</li><li class="listitem">Configure the frontend application to customize its <code class="literal">baseUrl</code>.</li></ol><div style="height:10px; width: 1px"></div></div><p>It is obvious that steps 2 and 3 must be repeated for any other application, for which we want to manipulate the base URL.</p><p>For step 1, let's put the <code class="literal">.htaccess</code> file with the following content in the <code class="literal">/yiiadv</code> folder:</p><div class="informalexample"><pre class="programlisting">RewriteEngine on
# For Backend
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_URI} ^/yiiadv/admin
RewriteRule ^admin(/.+)?$ /yiiadv/backend/web/$1 [L,PT]
# For Frontend
RewriteCond %{REQUEST_URI} !index.php
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ /yiiadv/frontend/web/$1</pre></div><p>Therefore, in the <code class="literal">Backend</code> block of <code class="literal">.htaccess</code>, we catch requests in <code class="literal">/yiiadv/admin</code> and redirect them to the <code class="literal">yiiadv/backend/web/</code> base URL.</p><p>For step 2, the backend requests capture is completed when we also make these changes in backend configuration, adding the <code class="literal">request</code> property in <code class="literal">backend/config/main.php</code>:</p><div class="informalexample"><pre class="programlisting">        'request' =&gt; [
            // !!! insert a secret key in the following (if it is empty) - this is required by cookie validation
            'cookieValidationKey' =&gt; '2OofX7Q9e-EQLSK5BEk70_07fUXkka8y',
            'baseUrl' =&gt; '/yiiadv/admin',     
        ],</pre></div><p>Now, point the browser to <code class="literal">http://hostname/yiiadv/admin</code> and if we did everything correctly we should finally be able to see the login page.</p><div class="note" title="Note"><h3 class="title"><a id="note65"></a>Note</h3><p>Make sure there is a <code class="literal">request</code> attribute in the configuration array in <code class="literal">backend/config/main-local.php</code>; we need to comment this otherwise it will overwrite <code class="literal">request</code> in the <code class="literal">backend/config/main.php</code> file that we have just changed.</p></div><p>Finally, just like we <a id="id434" class="indexterm"></a>have done with backend requests, in step 3, we need to change the <code class="literal">request</code> property for frontend requests under <code class="literal">frontend/config/main.php</code> in the configuration:</p><div class="informalexample"><pre class="programlisting">        'request' =&gt; [
            // !!! insert a secret key in the following (if it is empty) - this is required by cookie validation
            'cookieValidationKey' =&gt; 'ear8GcRjBGXQgKVwfEpbApyj7Fb0UKXk',
            'baseUrl' =&gt; '/yiiadv',     
        ],</pre></div><p>Now, point the browser to <code class="literal">http://hostname/yiiadv</code> and if we did everything correctly, we should see the congratulation page of the frontend.</p><p>As the last part of this example, if we want to reach the frontend to the <code class="literal">http://hostname</code> URL and backend to the <code class="literal">http://hostname/admin</code> URL, we must put an <code class="literal">.htaccess</code> file in the document root folder with this content:</p><div class="informalexample"><pre class="programlisting">RewriteEngine on
# For Backend
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_URI} ^/admin
RewriteRule ^admin(/.+)?$ /yiiadv/backend/web/$1 [L,PT]
# For Frontend
RewriteCond %{REQUEST_URI} !index.php
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ /yiiadv/frontend/web/$1</pre></div><p>Then, we must change the <code class="literal">request</code> property of the frontend configuration in <code class="literal">frontend/config/main.php</code> with:</p><div class="informalexample"><pre class="programlisting">        'request' =&gt; [
            // !!! insert a secret key in the following (if it is empty) - this is required by cookie validation
            'cookieValidationKey' =&gt; 'ear8GcRjBGXQgKVwfEpbApyj7Fb0UKXk',
            'baseUrl' =&gt; '',     
        ],</pre></div><p>Finally, change the <code class="literal">request</code> property of the backend configuration in <code class="literal">backend/config/main.php</code> with:</p><div class="informalexample"><pre class="programlisting">        'request' =&gt; [
            // !!! insert a secret key in the following (if it is empty) - this is required by cookie validation
            'cookieValidationKey' =&gt; '2OofX7Q9e-EQLSK5BEk70_07fUXkka8y',
            'baseUrl' =&gt; '/admin',     
        ],</pre></div><p>In this way, the <a id="id435" class="indexterm"></a>frontend is now reachable pointing the browser to <code class="literal">http://hostname</code> and the backend to <code class="literal">http://hostname/admin</code>.</p></div></div></body></html>