<?xml version="1.0" encoding="utf-8" ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.200rem;"><head><title>Chapter&nbsp;4.&nbsp;Creating a Room through Forms</title><link rel="stylesheet" href="../Styles/style0001.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.75.2"/></head><body id="page"><div class="chapter" title="Chapter&nbsp;4.&nbsp;Creating a Room through Forms"><div class="titlepage" id="aid-12AK82"><div><div><h1 class="title"><a id="ch04"></a>Chapter&nbsp;4.&nbsp;Creating a Room through Forms</h1></div></div></div><p>This chapter explains how to write a model class to store data that will be sent from View to Controller using a form, with validating input, formatting data, and uploading files. In this chapter, we will cover the following topics:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Creating a Model<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Example &ndash; a model to store room data</li></ul></div></li><li class="listitem">Using ActiveForm<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Example &ndash; creating a new room from the HTML form</li></ul></div></li><li class="listitem">Formatting date, time, and numbers</li><li class="listitem">Uploading files<div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">Example &ndash; uploading an image of the room</li></ul></div></li></ul></div><div class="section" title="Creating a Model"><div class="titlepage"><div><div><h1 class="title"><a id="ch04lvl1sec30"></a>Creating a Model</h1></div></div></div><p>The first step to<a id="id148" class="indexterm"></a> manipulate data between View and Controller is to create a Model. A <span class="strong"><strong>Model</strong></span> is a class that extends the <code class="literal">Model</code> class located under <code class="literal">yii\base\</code>, the base used for data models.</p><p>This is a suitable class for providing simple solutions in order to encapsulate data, assign content from array (form data), and validate data using rules. The Model base class implements the following commonly used features:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><span class="strong"><strong>Attribute declaration</strong></span>: By <a id="id149" class="indexterm"></a>default, every public class member is considered a model attribute; we can access all the members using the <code class="literal">attributes</code> property of Model.</li><li class="listitem"><span class="strong"><strong>Attribute labels</strong></span>: Each<a id="id150" class="indexterm"></a> attribute may be associated with a label for display purposes; we can extend the <code class="literal">attributeLabels()</code> method to return labels related to public members of Model.</li><li class="listitem"><span class="strong"><strong>Massive attribute assignment</strong></span>: We<a id="id151" class="indexterm"></a> can fill the member's content of Model by passing an entire array of values. This is convenient when we need to fill a model with data from the form.</li><li class="listitem"><span class="strong"><strong>Scenario-based validation</strong></span>: Model <a id="id152" class="indexterm"></a>provides rules to validate data. We can choose which ones apply according to the scenario, a keyword that defines the rules to apply.</li></ul></div><p>While performing data validation, Model also raises the following events:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><code class="literal">EVENT_BEFORE_VALIDATE</code>: This is an event raised at the beginning of <code class="literal">validate()</code></li><li class="listitem"><code class="literal">EVENT_AFTER_VALIDATE</code>: This is an event raised at the end of <code class="literal">validate()</code></li></ul></div><p>You can <a id="id153" class="indexterm"></a>directly use Model to store model data or extend it with customization.</p><div class="section" title="Example &ndash; a Model to store room data"><div class="titlepage"><div><div><h2 class="title"><a id="ch04lvl2sec21"></a>Example &ndash; a Model to store room data</h2></div></div></div><p>Now, let's create Model to store room data. To create this, we choose to name all fields with words written in lowercase characters and separated by underscores.</p><p>We can identify these fields of Model as follows:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><code class="literal">floor</code>: In a more generic situation, we consider this as a string member</li><li class="listitem"><code class="literal">room_number</code>: This is an integer member</li><li class="listitem"><code class="literal">has_conditioner</code>: This is an integer member with two values 0 and 1</li><li class="listitem"><code class="literal">has_tv</code>: This is an integer member with two values 0 and 1</li><li class="listitem"><code class="literal">has_phone</code>: This is an integer member with two values 0 and 1</li><li class="listitem"><code class="literal">available_from</code>: This is a date member that it is represented with a string in PHP</li><li class="listitem"><code class="literal">price_per_day</code>: This is a float member</li><li class="listitem"><code class="literal">assistance_email</code>: This is a string member containing an e-mail address</li><li class="listitem"><code class="literal">description</code>: This is a string member</li></ul></div><p>Now, create the <code class="literal">Model</code> class, named <code class="literal">Room</code> as the base class, in the previous field list, creating a file under <code class="literal">basic/models/Room.php</code> with the following content:</p><div class="informalexample"><pre class="programlisting">&lt;?php
namespace app\models;
use Yii;
use yii\base\Model;
class Room extends Model {
    public $floor;
    public $room_number;
    public $has_conditioner;
    public $has_tv;
    public $has_phone;
    public $available_from;
    public $price_per_day;
    public $description;
}</pre></div><p>The second thing to do is to append the <code class="literal">attributeLabels()</code> method in order to give a label to every member. This is not necessary, but it is a useful method to get labels displayed in the end user frontend.</p><div class="informalexample"><pre class="programlisting">public function attributeLabels()
{
    return [
        'floor' =&gt; 'Floor',
        'room_number' =&gt; 'Room number',
        'has_condition' =&gt; 'Condition available',
        'has_tv' =&gt; 'TV available',
        'has_phone' =&gt; 'Phone available',
        'available_from' =&gt; 'Available from',
        'price_per_day' =&gt; 'Price (EUR/day)',
        'description' =&gt; 'Description',
    ];
}</pre></div><p>The last <a id="id154" class="indexterm"></a>thing is to create rules to validate data. Rules are based on validators, whose defaults are listed as follows:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><code class="literal">boolean</code>: <code class="literal">yii\validators\BooleanValidator</code></li><li class="listitem"><code class="literal">captcha</code>: <code class="literal">yii\captcha\CaptchaValidator</code></li><li class="listitem"><code class="literal">compare</code>: <code class="literal">yii\validators\CompareValidator</code></li><li class="listitem"><code class="literal">date</code>: <code class="literal">yii\validators\DateValidator</code></li><li class="listitem"><code class="literal">double</code>: <code class="literal">yii\validators\NumberValidator</code></li><li class="listitem"><code class="literal">email</code>: <code class="literal">yii\validators\EmailValidator</code></li><li class="listitem"><code class="literal">exist</code>: <code class="literal">yii\validators\ExistValidator</code></li><li class="listitem"><code class="literal">file</code>: <code class="literal">yii\validators\FileValidator</code></li><li class="listitem"><code class="literal">filter</code>: <code class="literal">yii\validators\FilterValidator</code></li><li class="listitem"><code class="literal">image</code>: <code class="literal">yii\validators\ImageValidator</code></li><li class="listitem"><code class="literal">in</code>: <code class="literal">yii\validators\RangeValidator</code></li><li class="listitem"><code class="literal">integer</code>: <code class="literal">yii\validators\NumberValidator</code></li><li class="listitem"><code class="literal">match</code>: <code class="literal">yii\validators\RegularExpressionValidator</code></li><li class="listitem"><code class="literal">required</code>: <code class="literal">yii\validators\RequiredValidator</code></li><li class="listitem"><code class="literal">safe</code>: <code class="literal">yii\validators\SafeValidator</code></li><li class="listitem"><code class="literal">string</code>: <code class="literal">yii\validators\StringValidator</code></li><li class="listitem"><code class="literal">trim</code>: <code class="literal">yii\validators\FilterValidator</code></li><li class="listitem"><code class="literal">unique</code>: <code class="literal">yii\validators\UniqueValidator</code></li><li class="listitem"><code class="literal">url</code>: <code class="literal">yii\validators\UrlValidator</code></li></ul></div><p>A Rule <a id="id155" class="indexterm"></a>is an array whose values are in the following order:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">A string or an array to define an attribute or list of attributes to apply the rule</li><li class="listitem">The type of validator</li><li class="listitem">The <code class="literal">on</code> attribute to define which scenario to use</li><li class="listitem">The other parameters, depending on the validator that is used</li></ul></div><p>Write the <code class="literal">rules()</code> method of the <code class="literal">Room</code> Model class:</p><div class="informalexample"><pre class="programlisting">/**
 * @return array the validation rules.
 */
public function rules()
{
    return [
        ['floor', 'integer', 'min' =&gt; 0],
        ['room_number', 'integer', 'min' =&gt; 0],
        [['has_conditioner', 'has_tv', 'has_phone'], 'integer', 'min' =&gt; 0, 'max' =&gt; 1],
        ['available_from', 'date', 'format' =&gt; 'php:Y-m-d'],
        ['price_per_day', 'number', 'min' =&gt; 0],
        ['description', 'string', 'max' =&gt; 500]
    ];
}</pre></div><p>The preceding code is explained as follows:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem">The first rule establishes that <code class="literal">floor</code> is an integer, with <code class="literal">0</code> as the minimum value</li><li class="listitem">The second rule establishes that <code class="literal">room_number</code> is an integer, with <code class="literal">0</code> as the minimum value; we can put together floor and room in a single rule, melting them into an array as the first parameter of a single rule</li><li class="listitem">The third rule establishes that <code class="literal">has_condition</code>, <code class="literal">has_tv</code>, and <code class="literal">has_phone</code> are integers with possible values between 0 and 1 (formally a Boolean value)</li><li class="listitem">The fourth rule establishes that <code class="literal">available_from</code> is a date</li><li class="listitem">The fifth rule establishes that <code class="literal">price_per_day</code> is a number and its minimum value is 0</li><li class="listitem">The last rule establishes that <code class="literal">description</code> is a string with a maximum of 500 characters</li></ul></div><p>These <a id="id156" class="indexterm"></a>rules will be applied when the <code class="literal">validate()</code> method of <code class="literal">Model</code> is called. This method is automatically called when we attempt to call the <code class="literal">save()</code> method.</p></div></div></div></body></html>