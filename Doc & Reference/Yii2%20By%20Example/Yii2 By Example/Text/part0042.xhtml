<?xml version="1.0" encoding="utf-8" ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml" style="font-size:1.200rem;"><head><title>Using Gii to create room, customer, and reservation models</title><link rel="stylesheet" href="../Styles/style0001.css" type="text/css"/><meta name="generator" content="DocBook XSL Stylesheets V1.75.2"/></head><body id="page"><div class="section" title="Using Gii to create room, customer, and reservation models"><div class="titlepage" id="aid-181NK2"><div><div><h1 class="title"><a id="ch05lvl1sec36"></a>Using Gii to create room, customer, and reservation models</h1></div></div></div><p>Yii2 provides a powerful<a id="id198" class="indexterm"></a> tool to generate models, controllers, and <a id="id199" class="indexterm"></a>CRUD (create, read, update, and delete) <a id="id200" class="indexterm"></a>actions, forms, modules, and extensions: Gii.</p><p>At the bottom of the <code class="literal">basic/config/web.php</code> file, placed in the basic standard configuration, there is a block of code that enables Gii:</p><div class="informalexample"><pre class="programlisting">if (YII_ENV_DEV) {
    // configuration adjustments for 'dev' environment
    $config['bootstrap'][] = 'debug';
    $config['modules']['debug'] = 'yii\debug\Module';

    $config['bootstrap'][] = 'gii';
    $config['modules']['gii'] = 'yii\gii\Module';
}</pre></div><p>Verify that these <a id="id201" class="indexterm"></a>lines are present, otherwise append them at the bottom of the <code class="literal">web.php</code> file before the <code class="literal">return $config</code> statement. The last check is in <code class="literal">basic/web/index.php</code>. Verify that <code class="literal">YII_ENV</code> is <code class="literal">dev</code>, with this line:</p><div class="informalexample"><pre class="programlisting">defined('YII_ENV') or define('YII_ENV', 'dev');</pre></div><p>Now, we can point our<a id="id202" class="indexterm"></a> browser to <code class="literal">http://hostname/basic/web/gii</code>, and we should <a id="id203" class="indexterm"></a>see this error page:</p><div class="mediaobject"><img src="../Images/image00262.jpeg" alt="Using Gii to create room, customer, and reservation models"/><div class="caption"><p>Forbidden access to Gii</p></div></div><p style="clear:both; height: 1em;"> </p><p>This page will be displayed since access to Gii is locked by a password.</p><p>We need to add extra configuration to the <code class="literal">gii</code> module, passing other allowed IPs. Gii's configuration has an attribute named <code class="literal">allowedIPs</code>, which consents to specify which IP addresses can access the Gii page:</p><div class="informalexample"><pre class="programlisting"> 'allowedIPs' =&gt; ['127.0.0.1', '::1', '192.168.178.20']</pre></div><p>In this extract, Gii will accept access from a localhost (in the IPv4 form with 127.0.0.1 and IPv6 form with <code class="literal">::1</code>) and from <code class="literal">192.168.178.20</code>, which should be our IP address in private network.</p><p>If the Yii2 application is running on an external hosting, we will set our IP public address in this list of allowed IPs. For example, if our IP is <code class="literal">66.249.64.76</code>, this entry will be appended to existent (if we want maintain other permitted access points):</p><div class="informalexample"><pre class="programlisting"> 'allowedIPs' =&gt; ['127.0.0.1', '::1', '192.168.178.20', '66.249.64.76']</pre></div><p>To allow access from everywhere (useful in the development stage), we can add <code class="literal">*</code> in this list, which means that the Gii page can be accessed from every IP address:</p><div class="informalexample"><pre class="programlisting">'allowedIPs' =&gt; ['127.0.0.1', '::1', '192.168.178.20', '*']</pre></div><p>Consequently, the content of <code class="literal">gii]['gii'] = 'yii\gii\Module'</code> is:</p><div class="informalexample"><pre class="programlisting">    $config['modules']['gii'] = [
        'class' =&gt; 'yii\gii\Module',
        'allowedIPs' =&gt; ['127.0.0.1', '::1', '192.168.178.20', '*'] ]; configuration in basic/config/web.php will be:
if (YII_ENV_DEV) {
    // configuration adjustments for 'dev' environment
    $config['bootstrap'][] = 'debug';
    $config['modules']['debug'] = 'yii\debug\Module';

    $config['bootstrap'][] = 'gii';
    //$config['modules'
}</pre></div><p>Now, we are <a id="id204" class="indexterm"></a>able to access to Gii from any IP.</p><p>Refresh the browser by <a id="id205" class="indexterm"></a>clicking on the page <code class="literal">http://hostname/basic/web/gii</code> and<a id="id206" class="indexterm"></a> we can finally see its content:</p><div class="mediaobject"><img src="../Images/image00263.jpeg" alt="Using Gii to create room, customer, and reservation models"/><div class="caption"><p>Successful access to Gii</p></div></div><p style="clear:both; height: 1em;"> </p><p>Now, click on the <span class="strong"><strong>Start</strong></span> button of <span class="strong"><strong>Model Generator</strong></span>; we will have a form of <span class="strong"><strong>Model Generator</strong></span> where <span class="strong"><strong>Table Name</strong></span> is the unique field to fill in. When we start to type the table name, auto-suggestion will display the possible choices. After doing this, when we move to the <span class="strong"><strong>Model Class</strong></span> field, this will be automatically filled in by a framework. The other fields can be left with the default settings.</p><p>Type <code class="literal">room</code> in <a id="id207" class="indexterm"></a><span class="strong"><strong>Table Name</strong></span> and then click on the <span class="strong"><strong>Model Class</strong></span> field. This<a id="id208" class="indexterm"></a> field will be filled with <span class="strong"><strong>Room</strong></span>, which is <a id="id209" class="indexterm"></a>the filename in the <code class="literal">models</code> folder.</p><p>Clicking on the <span class="strong"><strong>Preview</strong></span> button will display the path where the file will be created and the action will be applied (it should be the overwrite value because we created it in the previous chapter).</p><p>Finally, click on the <span class="strong"><strong>Generate</strong></span> button to complete this action. A response message will give us information about the execution of this operation.</p><p>This is the form with a successful result:</p><div class="mediaobject"><img src="../Images/image00264.jpeg" alt="Using Gii to create room, customer, and reservation models"/><div class="caption"><p>Model Generator of Gii</p></div></div><p style="clear:both; height: 1em;"> </p><p>Repeat this <a id="id210" class="indexterm"></a>operation for the other two tables: reservations and <a id="id211" class="indexterm"></a>customers.</p><p>Now, we have three <a id="id212" class="indexterm"></a>models in the <code class="literal">basic/models</code> folder: <code class="literal">Room.php</code>, <code class="literal">Reservation.php</code>, and <code class="literal">Customer.php</code>.</p><p>Let's explain what Gii has done. Open the <code class="literal">basic/models/Room.php</code> file, and we have three methods:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><code class="literal">tableName()</code></li><li class="listitem"><code class="literal">rules()</code></li><li class="listitem"><code class="literal">attributeLabels()</code></li></ul></div><p>The first method, <code class="literal">tableName()</code>, simply returns the name of table to which this model is linked:</p><div class="informalexample"><pre class="programlisting">    public static function tableName()
    {
        return 'room';
    }</pre></div><p>The second method, <code class="literal">rules()</code>, is important because it contains rules validation to be checked when the <code class="literal">validate()</code> method is launched (it is launched automatically in the <code class="literal">save()</code> method) or a massive attributes assignment as:</p><div class="informalexample"><pre class="programlisting">$model-&gt;attributes = arrayWithData;</pre></div><p>This is the content of the <code class="literal">rules()</code> method:</p><div class="informalexample"><pre class="programlisting">    public function rules()
    {
        return [
            [['floor', 'room_number', 'has_conditioner', 'has_tv', 'has_phone', 'available_from'], 'required'],
            [['floor', 'room_number', 'has_conditioner', 'has_tv', 'has_phone'], 'integer'],
            [['available_from'], 'safe'],
            [['price_per_day'], 'number'],
            [['description'], 'string']
        ];
    }</pre></div><p>The first rule <a id="id213" class="indexterm"></a>specifies that the fields <code class="literal">floor</code>, <code class="literal">room_number</code>, <code class="literal">has_condition</code>, <code class="literal">has_tv</code>, and <code class="literal">avaiable_from</code> are mandatory because they are passed to the <a id="id214" class="indexterm"></a>required validator. Moreover, they must <a id="id215" class="indexterm"></a>be an integer, as required by the second rule.</p><div class="note" title="Note"><h3 class="title"><a id="note23"></a>Note</h3><p>Fields that are not in rules, will be skipped in a massive assignment because they are considered unsafe (since they are not present in rules). So it is necessary that when a field that has not got a validator rule, it must have an entry in the 'safe' validator.</p></div><p>The fourth rule specifies that the <code class="literal">price_per_day</code> field is a number, while the last rule states that <code class="literal">description</code> is a string.</p><div class="note" title="Note"><h3 class="title"><a id="note24"></a>Note</h3><p>These rules are read automatically from the database field type and constraint.</p></div><p>The last method <code class="literal">attributeLabels()</code> specifies the representation of fields in the display view as a form, grid, and so on.</p><p>This is the content of <code class="literal">attributeLabels()</code>:</p><div class="informalexample"><pre class="programlisting">    public function attributeLabels()
    {
        return [
            'id' =&gt; 'ID',
            'floor' =&gt; 'Floor',
            'room_number' =&gt; 'Room Number',
            'has_conditioner' =&gt; 'Has Conditioner',
            'has_tv' =&gt; 'Has Tv',
            'has_phone' =&gt; 'Has Phone',
            'available_from' =&gt; 'Available From',
            'price_per_day' =&gt; 'Price Per Day',
            'description' =&gt; 'Description',
        ];
    }</pre></div><p>Yii2 reports&mdash;in the model&mdash;any relationship between the tables present in a database. We have the <code class="literal">Reservation</code> model that has links to <code class="literal">Room</code> and <code class="literal">Customer</code>.</p><p>Follow these <a id="id216" class="indexterm"></a>instructions to make the framework able to<a id="id217" class="indexterm"></a> create a relationship in the model:</p><div class="orderedlist"><ol class="orderedlist arabic"><li class="listitem">Check that the database<a id="id218" class="indexterm"></a> tables use the InnoDB engine (which supports relationships and foreign keys).</li><li class="listitem">In the <code class="literal">Reservation</code> table, add two indexes, respectively for the <code class="literal">room_id</code> and <code class="literal">customer_id</code> fields:<div class="informalexample"><pre class="programlisting">ALTER TABLE `reservation` ADD INDEX ( `room_id` ) ;
ALTER TABLE `reservation` ADD INDEX ( `customer_id` ) ;</pre></div></li><li class="listitem">In the <code class="literal">Reservation</code> table, add two constraints to the <code class="literal">room</code> and <code class="literal">customer</code> tables:<div class="informalexample"><pre class="programlisting">ALTER TABLE `reservation` ADD FOREIGN KEY ( `room_id` ) REFERENCES `room` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT ;
ALTER TABLE `reservation` ADD FOREIGN KEY ( `customer_id` ) REFERENCES `customer` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT ;</pre></div><div class="note" title="Note"><h3 class="title"><a id="note25"></a>Note</h3><p>In these constraints, we used <code class="literal">RESTRICT</code> for <code class="literal">DELETE</code> and <code class="literal">UPDATE</code> operations. <code class="literal">RESTRICT</code> avoids the deletion of reservations that refer to customers or rooms that we are trying to delete. Therefore, to delete a customer or room that figures in reservations, we will be required to first delete the reservations.</p><p>This behavior ensures that important data such as reservations is never deleted automatically (in a cascade) when deleting a room or a customer. An error message will be displayed when you try to do this to a reservation linked to the customer or room.</p><p>In other contexts, a commonly used keyword is <code class="literal">CASCADE</code>, which removes all data that refers to linked tables.</p></div></li></ol><div style="height:10px; width: 1px"></div></div><p>Open Gii again<a id="id219" class="indexterm"></a> and navigate to <code class="literal">http://hostname/basic/web/gii</code>, then click on the <span class="strong"><strong>Start</strong></span> button in <span class="strong"><strong>Model Generator</strong></span> and type <code class="literal">room</code> in <span class="strong"><strong>Table Name</strong></span>. Click on the <span class="strong"><strong>Preview</strong></span> button at the bottom of the page and this<a id="id220" class="indexterm"></a> time you will see that <code class="literal">models/Room.php</code> exists and the action is overwrite, unflagged.</p><p>Click on the check near 'overwrite' and then on the <span class="strong"><strong>Generate</strong></span> button. In this way, we have forced to overwrite <a id="id221" class="indexterm"></a>the <code class="literal">Room</code> model with the relational data from the <code class="literal">Room</code> table.</p><p>Now, <code class="literal">basic/models/Room.php</code> contains a new method named <code class="literal">getReservations</code> at the bottom, with this content:</p><div class="informalexample"><pre class="programlisting">    /**
     * @return \yii\db\ActiveQuery
     */
    public function getReservations()
    {
       return $this-&gt;hasMany(Reservation::className(), ['room_id' =&gt; 'id']);
    }</pre></div><p>This method returns an ActiveQuery instance, which is used to build a query to be dispatched to the database.</p><div class="note" title="Note"><h3 class="title"><a id="note26"></a>Note</h3><p>When called as a property, this method will return the list of reservations linked to the model.</p><p>You might encounter the case where <code class="literal">$model</code> is an instance of the <code class="literal">Room</code> class for example: <code class="literal">$reservationsList = $model-&gt;reservations;</code>
</p><p>In this case, fill the <code class="literal">$reservationsList</code> variables with a list of reservations related to this <code class="literal">Room</code> model.</p><p>This is not surprising, although the <code class="literal">hasMany</code> method returns an <code class="literal">ActiveQuery</code> object.</p><p>If we explore the <code class="literal">__get()</code> method of <code class="literal">BaseActiveRecord</code> (which is the base class of ActiveRecord) that<a id="id222" class="indexterm"></a> handles the property<a id="id223" class="indexterm"></a> requirements, we can see these lines of code:</p><div class="informalexample"><pre class="programlisting">            $value = parent::__get($name);
            if ($value instanceof ActiveQueryInterface) {
                return $this-&gt;_related[$name] = $value-&gt;findFor($name, $this);
            } else {
                return $value;
            }</pre></div><p>This returns <a id="id224" class="indexterm"></a>linked results when the <code class="literal">$value</code> content is an instance of <code class="literal">ActiveQueryInterface</code> (which is an interface implemented by the <code class="literal">ActiveQuery</code> class).</p></div></div></body></html>